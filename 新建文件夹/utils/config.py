# -----------------------------------------------------------------------------
# primary strategy settings
fwd_day = 4
cost = 4e-4

# -----------------------------------------------------------------------------
# data storage location
# dir_root: where to store all data generated by this model
dir_root = "/mnt/lustre/group/ftluo/interns/kwsun/DATA/20220428_report_strategy"
# location of original daily data
dir_raw_data_day = "/mnt/lustre/group/ftluo/AllSample"
# location of original minute data
dir_raw_data_min = "/mnt/lustre/group/ftluo/AllSample/hf_data"

dir_data_day = f"{dir_root}/data_day"
dir_cache = f"{dir_root}/cache"
dir_feat = f"{dir_root}/feature"
dir_selected_feat = f"{dir_root}/selected_feature"

dir_rolling_feat = f"{dir_root}/rolling_feature"
dir_rolling_selected_feat = f"{dir_root}/rolling_selected_feature"
dir_rolling_res = f"{dir_root}/rolling_res"

dir_data_min = f"{dir_root}/data_min"

# -----------------------------------------------------------------------------
# settings for the feature searching process

# parameter stability
# example:
# +25% or -25% of parameter change should lead to performance decline lesser than 25%
adjoint_ratio = 0.2
compare_ratio = 0.7

# metrics limits
search_limits = dict()
search_limits["ic"] = 0.02
search_limits["ir"] = 1
search_limits["sharpe"] = 1
search_limits["tvr"] = 0.2
search_limits["psi"] = 0.15

# -----------------------------------------------------------------------------
# settings for the feature selecting process

# metrics limits
select_limits = dict()
select_limits["ic_ib_mean"] = 0.03
select_limits["cs_ic"] = 0.03
select_limits["ic_ib_mos"] = 2
select_limits["cs_ir"] = 2
select_limits["psi"] = 0.1
select_limits["sharpe_ib_mean"] = 1
select_limits["sharpe_ib_mos"] = 1.5
select_limits["exposure"] = 0.2
select_limits["exposure_count"] = 0.2
select_limits["mul_corr"] = 0.6

# classify_auc is ignored for now
select_limits["classify_auc"] = 0.7

# -----------------------------------------------------------------------------
# definitions of training and prediction time ranges
# len(train_date_paris)==len(valid_date_paris)
# model trained from train_date_pairs[idx][0] to train_date_pairs[idx][1]
# will be used to predict from pred_date_pairs[idx][0] to pred_date_pairs[idx][1]
# note that time ranges of pred_date_pairs should not overlap

# -----------------------------------------------------------------------------
# refit interval = semi-year
# train_date_pairs = [
#     [20160101, 20190101],
#     [20160701, 20190701],
#     [20170101, 20200101],
#     [20170701, 20200701],
#     [20180101, 20210101],
# ]

# pred_date_pairs = [
#     [20190101, 20190701],
#     [20190701, 20200101],
#     [20200101, 20200701],
#     [20200701, 20210101],
#     [20210101, 20210701],
# ]

# -----------------------------------------------------------------------------
# refit interval = quarter

train_date_pairs = [
    [20160101, 20190101],
    [20160401, 20190401],
    [20160701, 20190701],
    [20161001, 20191001],
    [20170101, 20200101],
    [20170401, 20200401],
    [20170701, 20200701],
    [20171001, 20201001],
    [20180101, 20210101],
    [20180401, 20210401],
]

pred_date_pairs = [
    [20190101, 20190401],
    [20190401, 20190701],
    [20190701, 20191001],
    [20191001, 20200101],
    [20200101, 20200401],
    [20200401, 20200701],
    [20200701, 20201001],
    [20201001, 20210101],
    [20210101, 20210401],
    [20210401, 20210701],
]
